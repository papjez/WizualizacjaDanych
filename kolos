print("zadanie 1")
lista = [1, 2, 3, 4, 5, 1, 2, 1, 1, 2, 3, 4, 5, 6]
lista2 = []
def func(lista):
    for i in lista:
        if i not in lista2:
            lista2.append(i)

    for i in range(len(lista2)):
        print(lista2[i])


func(lista)

print("zadanie 2")
str1 = "kolos wizdan"
sort_str = "".join(z for z in str1 if z.isalnum())
new_str = sort_str[::-4]
print(sort_str)
print(new_str)


print("zadanie 3")
def fibonacci_rek(n):
    if n == 0:
        return 0
    if n == 1:
        return 1

    return fibonacci_rek(n-1)+fibonacci_rek(n-2)

print(fibonacci_rek(10))

def fibonnaci(n):
    tablica = []
    tablica.append(0)
    tablica.append(1)
    for x in range(2, n+1):
        y = tablica[x-1]+tablica[x-2]
        tablica.append(y)

    return tablica[n]


print(fibonnaci(10))


print("zadanie 4")
def funkcja(*args,n):
    iloczyn = 1
    for x in args:
        iloczyn = iloczyn * x**n
    print(iloczyn)


funkcja(1, 2, 3, 4, 5, n=2)

print("zadanie 5")

fruits = ['apple', 'banana', 'pomegranate',
          'plum', 'orange', 'melon', 'cherry', 'watermelon']
fruits2 = [len(x) for x in fruits if "u" in x or "o" in x]
print(fruits2)

print("zadanie 6")
def fac(n):
    if n == 0:
        return 1
    return n*fac(n-1)

def newton(n,k):
    if n == k:
        return 1
    if k == 0:
        return 1
    return fac(n)/(fac(k)*fac(n-k))

print(newton(6,3))

print("zadanie 7")

class Polynomial:
    def __init__(self,*args):

        self.wielomian=[arg for arg in args]

    def __str__(self):
        output = ''
        maxpotega=len(self.wielomian)-1
        potega=maxpotega
        for element in self.wielomian:
            wyraz = ""
            if potega > 1:
                wyraz += f'{element}x^{potega}'
            elif potega == 1:
                wyraz += f'{element}x'
            else:
                wyraz += str(element)

            if element > 0 and potega != maxpotega:
                output += f'+{wyraz}'
            else:
                output += wyraz
            potega -= 1

        return output


def __add__(self, other):
    s = []
    l1 = self.wielomian
    l2 = other.wielomian
    if len(l1) > len(l2):
        for i in range(0, len(l1):
            s.append(self.wielomian[i] + other.wielomian[i])
        else len(l2) > len(l1):
            for
        y in range(0, len(l2):
        s.append(other.wielomian[i] + self.wielomian[i])

        wielomian = Polynomial(1, -2, 2)
print(wielomian)
